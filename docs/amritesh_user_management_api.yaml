openapi: 3.0.3
info:
  title: Well Eat API - User Management
  version: 1.0.0
  description: API for managing user accounts and profiles in the Well Eat application
servers:
  - url: https://api.welleat.com/v1
paths:
  /users:
    get:
      summary: Get a list of all users
      description: Retrieve a list of all registered users in the system
      responses:
        '200':
          description: A list of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new user
      description: Register a new user in the system
      requestBody:
        description: User object to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        description: Unique identifier of the user
        required: true
        schema:
          type: string
        example: "user123"
    get:
      summary: Get a user by ID
      description: Retrieve details of a specific user
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a user by ID
      description: Update details of a specific user
      requestBody:
        description: User object to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a user by ID
      description: Remove a specific user from the system
      responses:
        '204':
          description: User deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{userId}/medical-profile:
    parameters:
      - name: userId
        in: path
        description: Unique identifier of the user
        required: true
        schema:
          type: string
        example: "user123"
    get:
      summary: Get user's medical profile
      description: Retrieve the medical profile of a specific user
      responses:
        '200':
          description: Medical profile details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update user's medical profile
      description: Update the medical profile of a specific user
      requestBody:
        description: Medical profile object to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalProfile'
      responses:
        '200':
          description: Medical profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    UserInput:
      type: object
      required:
        - LastName
        - FirstName
        - Email
        - Password
      properties:
        LastName:
          type: string
          description: User's last name
          example: "Doe"
        FirstName:
          type: string
          description: User's first name
          example: "John"
        Email:
          type: string
          format: email
          description: User's email address
          example: "john.doe@example.com"
        Password:
          type: string
          format: password
          description: User's password (min 8 characters)
          example: "securePass123"
        Picture:
          type: string
          format: uri
          description: URL of user's profile picture
          example: "https://example.com/profile.jpg"
        DateOfBirth:
          type: string
          format: date
          description: User's date of birth
          example: "1990-01-01"
        CurrentCity:
          type: string
          description: User's current city of residence
          example: "New York"
        Country:
          type: string
          description: User's country of residence
          example: "USA"
        State:
          type: string
          description: User's state of residence
          example: "NY"
    User:
      allOf:
        - $ref: '#/components/schemas/UserInput'
        - type: object
          required:
            - UserID
          properties:
            UserID:
              type: string
              description: Unique identifier for the user
              example: "user123"
            FitnessGoal:
              $ref: '#/components/schemas/FitnessGoal'
            MedicalProfile:
              $ref: '#/components/schemas/MedicalProfile'
    FitnessGoal:
      type: object
      properties:
        GoalType:
          type: string
          description: Type of fitness goal
          enum: [LoseWeight, GainWeight, BuildMuscle, Maintain]
          example: "LoseWeight"
        TargetDate:
          type: string
          format: date
          description: Target date for achieving the fitness goal
          example: "2023-12-31"
    MedicalProfile:
      type: object
      properties:
        Allergies:
          type: array
          description: List of user's allergies
          items:
            type: string
          example: ["Peanuts", "Lactose"]
        PreviousAilments:
          type: array
          description: List of user's previous medical conditions
          items:
            type: string
          example: ["Asthma", "Hypertension"]
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

